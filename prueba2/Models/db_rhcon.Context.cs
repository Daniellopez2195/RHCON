//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace rhcon.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class rhconEntities : DbContext
    {
        public rhconEntities()
            : base("name=rhconEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<modulo> modulo { get; set; }
        public virtual DbSet<operaciones> operaciones { get; set; }
        public virtual DbSet<rol_operacion> rol_operacion { get; set; }
        public virtual DbSet<categoria> categoria { get; set; }
        public virtual DbSet<centroTrabajo> centroTrabajo { get; set; }
        public virtual DbSet<cuestionarioDetalle> cuestionarioDetalle { get; set; }
        public virtual DbSet<dominio> dominio { get; set; }
        public virtual DbSet<encargadosEmpresa> encargadosEmpresa { get; set; }
        public virtual DbSet<posiblesRespDetalle> posiblesRespDetalle { get; set; }
        public virtual DbSet<posiblesRespuestas> posiblesRespuestas { get; set; }
        public virtual DbSet<correos> correos { get; set; }
        public virtual DbSet<politica> politica { get; set; }
        public virtual DbSet<respuestaEmpDetalle> respuestaEmpDetalle { get; set; }
        public virtual DbSet<logRespuestaEmpleado> logRespuestaEmpleado { get; set; }
        public virtual DbSet<cuestionario> cuestionario { get; set; }
        public virtual DbSet<rol> rol { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<empleado> empleado { get; set; }
        public virtual DbSet<cuestionarioATS> cuestionarioATS { get; set; }
        public virtual DbSet<cuestionarioATSPersonas> cuestionarioATSPersonas { get; set; }
        public virtual DbSet<cuestionarioATSRespuestas> cuestionarioATSRespuestas { get; set; }
        public virtual DbSet<logCuestionarioATS> logCuestionarioATS { get; set; }
        public virtual DbSet<respuestaEmpleado> respuestaEmpleado { get; set; }
        public virtual DbSet<usuario> usuario { get; set; }
        public virtual DbSet<cstatus> cstatus { get; set; }
        public virtual DbSet<empresa> empresa { get; set; }
        public virtual DbSet<resultados_nom025> resultados_nom025 { get; set; }
        public virtual DbSet<result_categoria> result_categoria { get; set; }
        public virtual DbSet<result_dimension> result_dimension { get; set; }
        public virtual DbSet<result_dominio> result_dominio { get; set; }
        public virtual DbSet<resultados_por_usuario_025> resultados_por_usuario_025 { get; set; }
        public virtual DbSet<resultados_por_usuario_035> resultados_por_usuario_035 { get; set; }
        public virtual DbSet<periodosEncuesta> periodosEncuesta { get; set; }
        public virtual DbSet<dimencion> dimencion { get; set; }
        public virtual DbSet<EncabezadoCuestionario> EncabezadoCuestionario { get; set; }
        public virtual DbSet<Log_factores> Log_factores { get; set; }
        public virtual DbSet<admin_perfil> admin_perfil { get; set; }
        public virtual DbSet<EncuestaSugerencias> EncuestaSugerencias { get; set; }
        public virtual DbSet<acciones> acciones { get; set; }
        public virtual DbSet<prevenciones> prevenciones { get; set; }
        public virtual DbSet<resultados_nom035> resultados_nom035 { get; set; }
        public virtual DbSet<plandeaccion> plandeaccion { get; set; }
    
        public virtual int userInsert(string userName, string userEmail, string userPassword, Nullable<int> userIdRol, Nullable<int> userIdStatus, ObjectParameter userID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("userEmail", userEmail) :
                new ObjectParameter("userEmail", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("userPassword", userPassword) :
                new ObjectParameter("userPassword", typeof(string));
    
            var userIdRolParameter = userIdRol.HasValue ?
                new ObjectParameter("userIdRol", userIdRol) :
                new ObjectParameter("userIdRol", typeof(int));
    
            var userIdStatusParameter = userIdStatus.HasValue ?
                new ObjectParameter("userIdStatus", userIdStatus) :
                new ObjectParameter("userIdStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("userInsert", userNameParameter, userEmailParameter, userPasswordParameter, userIdRolParameter, userIdStatusParameter, userID);
        }
    
        public virtual int userUpdate(Nullable<int> userID, string userName, string userEmail, string userPassword, Nullable<int> userIdRol)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("userEmail", userEmail) :
                new ObjectParameter("userEmail", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("userPassword", userPassword) :
                new ObjectParameter("userPassword", typeof(string));
    
            var userIdRolParameter = userIdRol.HasValue ?
                new ObjectParameter("userIdRol", userIdRol) :
                new ObjectParameter("userIdRol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("userUpdate", userIDParameter, userNameParameter, userEmailParameter, userPasswordParameter, userIdRolParameter);
        }
    
        public virtual int empresaInsert(string empRazonc, string empRazons, string empEmail, string empTelefono, string empDireccion, string empActividad, string empPuesto, string empRFC, string empImg, Nullable<int> empIdStatus, string empUserName, string empUserEmail, string empUserPassword, Nullable<int> empUserIdRol, string empContrato, string nombreJerarquia, string puestoJerarquia, ObjectParameter empID)
        {
            var empRazoncParameter = empRazonc != null ?
                new ObjectParameter("empRazonc", empRazonc) :
                new ObjectParameter("empRazonc", typeof(string));
    
            var empRazonsParameter = empRazons != null ?
                new ObjectParameter("empRazons", empRazons) :
                new ObjectParameter("empRazons", typeof(string));
    
            var empEmailParameter = empEmail != null ?
                new ObjectParameter("empEmail", empEmail) :
                new ObjectParameter("empEmail", typeof(string));
    
            var empTelefonoParameter = empTelefono != null ?
                new ObjectParameter("empTelefono", empTelefono) :
                new ObjectParameter("empTelefono", typeof(string));
    
            var empDireccionParameter = empDireccion != null ?
                new ObjectParameter("empDireccion", empDireccion) :
                new ObjectParameter("empDireccion", typeof(string));
    
            var empActividadParameter = empActividad != null ?
                new ObjectParameter("empActividad", empActividad) :
                new ObjectParameter("empActividad", typeof(string));
    
            var empPuestoParameter = empPuesto != null ?
                new ObjectParameter("empPuesto", empPuesto) :
                new ObjectParameter("empPuesto", typeof(string));
    
            var empRFCParameter = empRFC != null ?
                new ObjectParameter("empRFC", empRFC) :
                new ObjectParameter("empRFC", typeof(string));
    
            var empImgParameter = empImg != null ?
                new ObjectParameter("empImg", empImg) :
                new ObjectParameter("empImg", typeof(string));
    
            var empIdStatusParameter = empIdStatus.HasValue ?
                new ObjectParameter("empIdStatus", empIdStatus) :
                new ObjectParameter("empIdStatus", typeof(int));
    
            var empUserNameParameter = empUserName != null ?
                new ObjectParameter("empUserName", empUserName) :
                new ObjectParameter("empUserName", typeof(string));
    
            var empUserEmailParameter = empUserEmail != null ?
                new ObjectParameter("empUserEmail", empUserEmail) :
                new ObjectParameter("empUserEmail", typeof(string));
    
            var empUserPasswordParameter = empUserPassword != null ?
                new ObjectParameter("empUserPassword", empUserPassword) :
                new ObjectParameter("empUserPassword", typeof(string));
    
            var empUserIdRolParameter = empUserIdRol.HasValue ?
                new ObjectParameter("empUserIdRol", empUserIdRol) :
                new ObjectParameter("empUserIdRol", typeof(int));
    
            var empContratoParameter = empContrato != null ?
                new ObjectParameter("empContrato", empContrato) :
                new ObjectParameter("empContrato", typeof(string));
    
            var nombreJerarquiaParameter = nombreJerarquia != null ?
                new ObjectParameter("nombreJerarquia", nombreJerarquia) :
                new ObjectParameter("nombreJerarquia", typeof(string));
    
            var puestoJerarquiaParameter = puestoJerarquia != null ?
                new ObjectParameter("puestoJerarquia", puestoJerarquia) :
                new ObjectParameter("puestoJerarquia", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("empresaInsert", empRazoncParameter, empRazonsParameter, empEmailParameter, empTelefonoParameter, empDireccionParameter, empActividadParameter, empPuestoParameter, empRFCParameter, empImgParameter, empIdStatusParameter, empUserNameParameter, empUserEmailParameter, empUserPasswordParameter, empUserIdRolParameter, empContratoParameter, nombreJerarquiaParameter, puestoJerarquiaParameter, empID);
        }
    
        public virtual int userDelete(Nullable<int> userID, Nullable<int> userIdStatus)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var userIdStatusParameter = userIdStatus.HasValue ?
                new ObjectParameter("userIdStatus", userIdStatus) :
                new ObjectParameter("userIdStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("userDelete", userIDParameter, userIdStatusParameter);
        }
    
        public virtual int userLogin(string userName, string userPassword, Nullable<int> userPerfil, ObjectParameter valorRetorno, ObjectParameter idUsuaro)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("userPassword", userPassword) :
                new ObjectParameter("userPassword", typeof(string));
    
            var userPerfilParameter = userPerfil.HasValue ?
                new ObjectParameter("userPerfil", userPerfil) :
                new ObjectParameter("userPerfil", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("userLogin", userNameParameter, userPasswordParameter, userPerfilParameter, valorRetorno, idUsuaro);
        }
    
        public virtual int empresaDelete(Nullable<int> empID, Nullable<int> empIdStatus)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var empIdStatusParameter = empIdStatus.HasValue ?
                new ObjectParameter("empIdStatus", empIdStatus) :
                new ObjectParameter("empIdStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("empresaDelete", empIDParameter, empIdStatusParameter);
        }
    
        public virtual int empresaUpdate(Nullable<int> empID, string empRazonc, string empRazons, string empEmail, string empTelefono, string empDireccion, string empActividad, string empPuesto, string empRFC, string empImg, Nullable<int> empIdUsuario, string empUserName, string empUserEmail, string empUserPassword, Nullable<int> empUserIdRol, Nullable<int> empUserId)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var empRazoncParameter = empRazonc != null ?
                new ObjectParameter("empRazonc", empRazonc) :
                new ObjectParameter("empRazonc", typeof(string));
    
            var empRazonsParameter = empRazons != null ?
                new ObjectParameter("empRazons", empRazons) :
                new ObjectParameter("empRazons", typeof(string));
    
            var empEmailParameter = empEmail != null ?
                new ObjectParameter("empEmail", empEmail) :
                new ObjectParameter("empEmail", typeof(string));
    
            var empTelefonoParameter = empTelefono != null ?
                new ObjectParameter("empTelefono", empTelefono) :
                new ObjectParameter("empTelefono", typeof(string));
    
            var empDireccionParameter = empDireccion != null ?
                new ObjectParameter("empDireccion", empDireccion) :
                new ObjectParameter("empDireccion", typeof(string));
    
            var empActividadParameter = empActividad != null ?
                new ObjectParameter("empActividad", empActividad) :
                new ObjectParameter("empActividad", typeof(string));
    
            var empPuestoParameter = empPuesto != null ?
                new ObjectParameter("empPuesto", empPuesto) :
                new ObjectParameter("empPuesto", typeof(string));
    
            var empRFCParameter = empRFC != null ?
                new ObjectParameter("empRFC", empRFC) :
                new ObjectParameter("empRFC", typeof(string));
    
            var empImgParameter = empImg != null ?
                new ObjectParameter("empImg", empImg) :
                new ObjectParameter("empImg", typeof(string));
    
            var empIdUsuarioParameter = empIdUsuario.HasValue ?
                new ObjectParameter("empIdUsuario", empIdUsuario) :
                new ObjectParameter("empIdUsuario", typeof(int));
    
            var empUserNameParameter = empUserName != null ?
                new ObjectParameter("empUserName", empUserName) :
                new ObjectParameter("empUserName", typeof(string));
    
            var empUserEmailParameter = empUserEmail != null ?
                new ObjectParameter("empUserEmail", empUserEmail) :
                new ObjectParameter("empUserEmail", typeof(string));
    
            var empUserPasswordParameter = empUserPassword != null ?
                new ObjectParameter("empUserPassword", empUserPassword) :
                new ObjectParameter("empUserPassword", typeof(string));
    
            var empUserIdRolParameter = empUserIdRol.HasValue ?
                new ObjectParameter("empUserIdRol", empUserIdRol) :
                new ObjectParameter("empUserIdRol", typeof(int));
    
            var empUserIdParameter = empUserId.HasValue ?
                new ObjectParameter("empUserId", empUserId) :
                new ObjectParameter("empUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("empresaUpdate", empIDParameter, empRazoncParameter, empRazonsParameter, empEmailParameter, empTelefonoParameter, empDireccionParameter, empActividadParameter, empPuestoParameter, empRFCParameter, empImgParameter, empIdUsuarioParameter, empUserNameParameter, empUserEmailParameter, empUserPasswordParameter, empUserIdRolParameter, empUserIdParameter);
        }
    
        public virtual int ctrabajoDelete(Nullable<int> ctID, Nullable<int> ctIdStatus)
        {
            var ctIDParameter = ctID.HasValue ?
                new ObjectParameter("ctID", ctID) :
                new ObjectParameter("ctID", typeof(int));
    
            var ctIdStatusParameter = ctIdStatus.HasValue ?
                new ObjectParameter("ctIdStatus", ctIdStatus) :
                new ObjectParameter("ctIdStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ctrabajoDelete", ctIDParameter, ctIdStatusParameter);
        }
    
        public virtual int ctrabajoInsert(string ctNombre, string ctDireccion, string ctActividades, Nullable<int> ctIdEmpresa, Nullable<int> ctIdStatus, string ctUserName, string ctUserEmail, string ctUserPassword, Nullable<int> ctUserIdRol, ObjectParameter ctID)
        {
            var ctNombreParameter = ctNombre != null ?
                new ObjectParameter("ctNombre", ctNombre) :
                new ObjectParameter("ctNombre", typeof(string));
    
            var ctDireccionParameter = ctDireccion != null ?
                new ObjectParameter("ctDireccion", ctDireccion) :
                new ObjectParameter("ctDireccion", typeof(string));
    
            var ctActividadesParameter = ctActividades != null ?
                new ObjectParameter("ctActividades", ctActividades) :
                new ObjectParameter("ctActividades", typeof(string));
    
            var ctIdEmpresaParameter = ctIdEmpresa.HasValue ?
                new ObjectParameter("ctIdEmpresa", ctIdEmpresa) :
                new ObjectParameter("ctIdEmpresa", typeof(int));
    
            var ctIdStatusParameter = ctIdStatus.HasValue ?
                new ObjectParameter("ctIdStatus", ctIdStatus) :
                new ObjectParameter("ctIdStatus", typeof(int));
    
            var ctUserNameParameter = ctUserName != null ?
                new ObjectParameter("ctUserName", ctUserName) :
                new ObjectParameter("ctUserName", typeof(string));
    
            var ctUserEmailParameter = ctUserEmail != null ?
                new ObjectParameter("ctUserEmail", ctUserEmail) :
                new ObjectParameter("ctUserEmail", typeof(string));
    
            var ctUserPasswordParameter = ctUserPassword != null ?
                new ObjectParameter("ctUserPassword", ctUserPassword) :
                new ObjectParameter("ctUserPassword", typeof(string));
    
            var ctUserIdRolParameter = ctUserIdRol.HasValue ?
                new ObjectParameter("ctUserIdRol", ctUserIdRol) :
                new ObjectParameter("ctUserIdRol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ctrabajoInsert", ctNombreParameter, ctDireccionParameter, ctActividadesParameter, ctIdEmpresaParameter, ctIdStatusParameter, ctUserNameParameter, ctUserEmailParameter, ctUserPasswordParameter, ctUserIdRolParameter, ctID);
        }
    
        public virtual int ctrabajoUpdate(Nullable<int> ctID, string ctNombre, string ctDireccion, string ctActividades, Nullable<int> ctIdEmpresa, Nullable<int> ctIdStatus, Nullable<int> ctUserId, string ctUserName, string ctUserEmail, string ctUserPassword, Nullable<int> ctUserIdRol)
        {
            var ctIDParameter = ctID.HasValue ?
                new ObjectParameter("ctID", ctID) :
                new ObjectParameter("ctID", typeof(int));
    
            var ctNombreParameter = ctNombre != null ?
                new ObjectParameter("ctNombre", ctNombre) :
                new ObjectParameter("ctNombre", typeof(string));
    
            var ctDireccionParameter = ctDireccion != null ?
                new ObjectParameter("ctDireccion", ctDireccion) :
                new ObjectParameter("ctDireccion", typeof(string));
    
            var ctActividadesParameter = ctActividades != null ?
                new ObjectParameter("ctActividades", ctActividades) :
                new ObjectParameter("ctActividades", typeof(string));
    
            var ctIdEmpresaParameter = ctIdEmpresa.HasValue ?
                new ObjectParameter("ctIdEmpresa", ctIdEmpresa) :
                new ObjectParameter("ctIdEmpresa", typeof(int));
    
            var ctIdStatusParameter = ctIdStatus.HasValue ?
                new ObjectParameter("ctIdStatus", ctIdStatus) :
                new ObjectParameter("ctIdStatus", typeof(int));
    
            var ctUserIdParameter = ctUserId.HasValue ?
                new ObjectParameter("ctUserId", ctUserId) :
                new ObjectParameter("ctUserId", typeof(int));
    
            var ctUserNameParameter = ctUserName != null ?
                new ObjectParameter("ctUserName", ctUserName) :
                new ObjectParameter("ctUserName", typeof(string));
    
            var ctUserEmailParameter = ctUserEmail != null ?
                new ObjectParameter("ctUserEmail", ctUserEmail) :
                new ObjectParameter("ctUserEmail", typeof(string));
    
            var ctUserPasswordParameter = ctUserPassword != null ?
                new ObjectParameter("ctUserPassword", ctUserPassword) :
                new ObjectParameter("ctUserPassword", typeof(string));
    
            var ctUserIdRolParameter = ctUserIdRol.HasValue ?
                new ObjectParameter("ctUserIdRol", ctUserIdRol) :
                new ObjectParameter("ctUserIdRol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ctrabajoUpdate", ctIDParameter, ctNombreParameter, ctDireccionParameter, ctActividadesParameter, ctIdEmpresaParameter, ctIdStatusParameter, ctUserIdParameter, ctUserNameParameter, ctUserEmailParameter, ctUserPasswordParameter, ctUserIdRolParameter);
        }
    
        public virtual int empleadoDelete(Nullable<int> emplID, Nullable<int> emplIdStatus)
        {
            var emplIDParameter = emplID.HasValue ?
                new ObjectParameter("emplID", emplID) :
                new ObjectParameter("emplID", typeof(int));
    
            var emplIdStatusParameter = emplIdStatus.HasValue ?
                new ObjectParameter("emplIdStatus", emplIdStatus) :
                new ObjectParameter("emplIdStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("empleadoDelete", emplIDParameter, emplIdStatusParameter);
        }
    
        public virtual int empleadoInsert(string emplNombre, string emplCurp, string emplNss, string emplTelefono, string emplContacto, string emplCelcontacto, Nullable<int> emplIdEmpresa, Nullable<int> emplIdCentroTrabajo, Nullable<int> emplIdEstatus, string emplUserName, string emplUserEmail, string emplUserPassword, Nullable<int> emplUserIdRol, string empAreaFuncion, ObjectParameter emplID)
        {
            var emplNombreParameter = emplNombre != null ?
                new ObjectParameter("emplNombre", emplNombre) :
                new ObjectParameter("emplNombre", typeof(string));
    
            var emplCurpParameter = emplCurp != null ?
                new ObjectParameter("emplCurp", emplCurp) :
                new ObjectParameter("emplCurp", typeof(string));
    
            var emplNssParameter = emplNss != null ?
                new ObjectParameter("emplNss", emplNss) :
                new ObjectParameter("emplNss", typeof(string));
    
            var emplTelefonoParameter = emplTelefono != null ?
                new ObjectParameter("emplTelefono", emplTelefono) :
                new ObjectParameter("emplTelefono", typeof(string));
    
            var emplContactoParameter = emplContacto != null ?
                new ObjectParameter("emplContacto", emplContacto) :
                new ObjectParameter("emplContacto", typeof(string));
    
            var emplCelcontactoParameter = emplCelcontacto != null ?
                new ObjectParameter("emplCelcontacto", emplCelcontacto) :
                new ObjectParameter("emplCelcontacto", typeof(string));
    
            var emplIdEmpresaParameter = emplIdEmpresa.HasValue ?
                new ObjectParameter("emplIdEmpresa", emplIdEmpresa) :
                new ObjectParameter("emplIdEmpresa", typeof(int));
    
            var emplIdCentroTrabajoParameter = emplIdCentroTrabajo.HasValue ?
                new ObjectParameter("emplIdCentroTrabajo", emplIdCentroTrabajo) :
                new ObjectParameter("emplIdCentroTrabajo", typeof(int));
    
            var emplIdEstatusParameter = emplIdEstatus.HasValue ?
                new ObjectParameter("emplIdEstatus", emplIdEstatus) :
                new ObjectParameter("emplIdEstatus", typeof(int));
    
            var emplUserNameParameter = emplUserName != null ?
                new ObjectParameter("emplUserName", emplUserName) :
                new ObjectParameter("emplUserName", typeof(string));
    
            var emplUserEmailParameter = emplUserEmail != null ?
                new ObjectParameter("emplUserEmail", emplUserEmail) :
                new ObjectParameter("emplUserEmail", typeof(string));
    
            var emplUserPasswordParameter = emplUserPassword != null ?
                new ObjectParameter("emplUserPassword", emplUserPassword) :
                new ObjectParameter("emplUserPassword", typeof(string));
    
            var emplUserIdRolParameter = emplUserIdRol.HasValue ?
                new ObjectParameter("emplUserIdRol", emplUserIdRol) :
                new ObjectParameter("emplUserIdRol", typeof(int));
    
            var empAreaFuncionParameter = empAreaFuncion != null ?
                new ObjectParameter("empAreaFuncion", empAreaFuncion) :
                new ObjectParameter("empAreaFuncion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("empleadoInsert", emplNombreParameter, emplCurpParameter, emplNssParameter, emplTelefonoParameter, emplContactoParameter, emplCelcontactoParameter, emplIdEmpresaParameter, emplIdCentroTrabajoParameter, emplIdEstatusParameter, emplUserNameParameter, emplUserEmailParameter, emplUserPasswordParameter, emplUserIdRolParameter, empAreaFuncionParameter, emplID);
        }
    
        public virtual int empleadoUpdate(Nullable<int> emplID, string emplNombre, string emplCurp, string emplNss, string emplTelefono, string emplContacto, string emplCelcontacto, Nullable<int> emplIdEmpresa, Nullable<int> emplIdCentroTrabajo, Nullable<int> emplIdEstatus, Nullable<int> emplIdUsuario, string emplUserName, string emplUserEmail, string emplUserPassword, Nullable<int> emplUserIdRol, string empAreaFuncion, Nullable<int> emplUserId)
        {
            var emplIDParameter = emplID.HasValue ?
                new ObjectParameter("emplID", emplID) :
                new ObjectParameter("emplID", typeof(int));
    
            var emplNombreParameter = emplNombre != null ?
                new ObjectParameter("emplNombre", emplNombre) :
                new ObjectParameter("emplNombre", typeof(string));
    
            var emplCurpParameter = emplCurp != null ?
                new ObjectParameter("emplCurp", emplCurp) :
                new ObjectParameter("emplCurp", typeof(string));
    
            var emplNssParameter = emplNss != null ?
                new ObjectParameter("emplNss", emplNss) :
                new ObjectParameter("emplNss", typeof(string));
    
            var emplTelefonoParameter = emplTelefono != null ?
                new ObjectParameter("emplTelefono", emplTelefono) :
                new ObjectParameter("emplTelefono", typeof(string));
    
            var emplContactoParameter = emplContacto != null ?
                new ObjectParameter("emplContacto", emplContacto) :
                new ObjectParameter("emplContacto", typeof(string));
    
            var emplCelcontactoParameter = emplCelcontacto != null ?
                new ObjectParameter("emplCelcontacto", emplCelcontacto) :
                new ObjectParameter("emplCelcontacto", typeof(string));
    
            var emplIdEmpresaParameter = emplIdEmpresa.HasValue ?
                new ObjectParameter("emplIdEmpresa", emplIdEmpresa) :
                new ObjectParameter("emplIdEmpresa", typeof(int));
    
            var emplIdCentroTrabajoParameter = emplIdCentroTrabajo.HasValue ?
                new ObjectParameter("emplIdCentroTrabajo", emplIdCentroTrabajo) :
                new ObjectParameter("emplIdCentroTrabajo", typeof(int));
    
            var emplIdEstatusParameter = emplIdEstatus.HasValue ?
                new ObjectParameter("emplIdEstatus", emplIdEstatus) :
                new ObjectParameter("emplIdEstatus", typeof(int));
    
            var emplIdUsuarioParameter = emplIdUsuario.HasValue ?
                new ObjectParameter("emplIdUsuario", emplIdUsuario) :
                new ObjectParameter("emplIdUsuario", typeof(int));
    
            var emplUserNameParameter = emplUserName != null ?
                new ObjectParameter("emplUserName", emplUserName) :
                new ObjectParameter("emplUserName", typeof(string));
    
            var emplUserEmailParameter = emplUserEmail != null ?
                new ObjectParameter("emplUserEmail", emplUserEmail) :
                new ObjectParameter("emplUserEmail", typeof(string));
    
            var emplUserPasswordParameter = emplUserPassword != null ?
                new ObjectParameter("emplUserPassword", emplUserPassword) :
                new ObjectParameter("emplUserPassword", typeof(string));
    
            var emplUserIdRolParameter = emplUserIdRol.HasValue ?
                new ObjectParameter("emplUserIdRol", emplUserIdRol) :
                new ObjectParameter("emplUserIdRol", typeof(int));
    
            var empAreaFuncionParameter = empAreaFuncion != null ?
                new ObjectParameter("empAreaFuncion", empAreaFuncion) :
                new ObjectParameter("empAreaFuncion", typeof(string));
    
            var emplUserIdParameter = emplUserId.HasValue ?
                new ObjectParameter("emplUserId", emplUserId) :
                new ObjectParameter("emplUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("empleadoUpdate", emplIDParameter, emplNombreParameter, emplCurpParameter, emplNssParameter, emplTelefonoParameter, emplContactoParameter, emplCelcontactoParameter, emplIdEmpresaParameter, emplIdCentroTrabajoParameter, emplIdEstatusParameter, emplIdUsuarioParameter, emplUserNameParameter, emplUserEmailParameter, emplUserPasswordParameter, emplUserIdRolParameter, empAreaFuncionParameter, emplUserIdParameter);
        }
    
        public virtual int ActivarPeriodoEncuesta(Nullable<int> idEmpresa, Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechaFinal, Nullable<int> idUsuario, string cedula, Nullable<short> year, string responsable, ObjectParameter periodoEncuestaID)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("idEmpresa", idEmpresa) :
                new ObjectParameter("idEmpresa", typeof(int));
    
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("fechaInicio", fechaInicio) :
                new ObjectParameter("fechaInicio", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("fechaFinal", fechaFinal) :
                new ObjectParameter("fechaFinal", typeof(System.DateTime));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(short));
    
            var responsableParameter = responsable != null ?
                new ObjectParameter("responsable", responsable) :
                new ObjectParameter("responsable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActivarPeriodoEncuesta", idEmpresaParameter, fechaInicioParameter, fechaFinalParameter, idUsuarioParameter, cedulaParameter, yearParameter, responsableParameter, periodoEncuestaID);
        }
    
        public virtual int respEmplInsert(string sexo, string edad, string estadoCivil, string antiguedad, string tiempoPuesto, string tiempoExperiencia, string escolaridad, string tipoJornada, string tipoContratacion, string tipoPersonal, string tieneDiscapacidad, string discapacidad, string realizaRotacion, Nullable<int> idCuestionario, Nullable<int> idEmpresa, Nullable<int> idCentroTRabajo, string parteSectores, string sector, string existePolitica, string existeCodigoEtica, string existeComite, string existeMecanismo, string comentario, Nullable<int> idEmpleado, string dondeTrabajo, ObjectParameter idRespEmpl)
        {
            var sexoParameter = sexo != null ?
                new ObjectParameter("sexo", sexo) :
                new ObjectParameter("sexo", typeof(string));
    
            var edadParameter = edad != null ?
                new ObjectParameter("edad", edad) :
                new ObjectParameter("edad", typeof(string));
    
            var estadoCivilParameter = estadoCivil != null ?
                new ObjectParameter("estadoCivil", estadoCivil) :
                new ObjectParameter("estadoCivil", typeof(string));
    
            var antiguedadParameter = antiguedad != null ?
                new ObjectParameter("antiguedad", antiguedad) :
                new ObjectParameter("antiguedad", typeof(string));
    
            var tiempoPuestoParameter = tiempoPuesto != null ?
                new ObjectParameter("tiempoPuesto", tiempoPuesto) :
                new ObjectParameter("tiempoPuesto", typeof(string));
    
            var tiempoExperienciaParameter = tiempoExperiencia != null ?
                new ObjectParameter("tiempoExperiencia", tiempoExperiencia) :
                new ObjectParameter("tiempoExperiencia", typeof(string));
    
            var escolaridadParameter = escolaridad != null ?
                new ObjectParameter("escolaridad", escolaridad) :
                new ObjectParameter("escolaridad", typeof(string));
    
            var tipoJornadaParameter = tipoJornada != null ?
                new ObjectParameter("tipoJornada", tipoJornada) :
                new ObjectParameter("tipoJornada", typeof(string));
    
            var tipoContratacionParameter = tipoContratacion != null ?
                new ObjectParameter("tipoContratacion", tipoContratacion) :
                new ObjectParameter("tipoContratacion", typeof(string));
    
            var tipoPersonalParameter = tipoPersonal != null ?
                new ObjectParameter("tipoPersonal", tipoPersonal) :
                new ObjectParameter("tipoPersonal", typeof(string));
    
            var tieneDiscapacidadParameter = tieneDiscapacidad != null ?
                new ObjectParameter("tieneDiscapacidad", tieneDiscapacidad) :
                new ObjectParameter("tieneDiscapacidad", typeof(string));
    
            var discapacidadParameter = discapacidad != null ?
                new ObjectParameter("discapacidad", discapacidad) :
                new ObjectParameter("discapacidad", typeof(string));
    
            var realizaRotacionParameter = realizaRotacion != null ?
                new ObjectParameter("realizaRotacion", realizaRotacion) :
                new ObjectParameter("realizaRotacion", typeof(string));
    
            var idCuestionarioParameter = idCuestionario.HasValue ?
                new ObjectParameter("idCuestionario", idCuestionario) :
                new ObjectParameter("idCuestionario", typeof(int));
    
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("idEmpresa", idEmpresa) :
                new ObjectParameter("idEmpresa", typeof(int));
    
            var idCentroTRabajoParameter = idCentroTRabajo.HasValue ?
                new ObjectParameter("idCentroTRabajo", idCentroTRabajo) :
                new ObjectParameter("idCentroTRabajo", typeof(int));
    
            var parteSectoresParameter = parteSectores != null ?
                new ObjectParameter("parteSectores", parteSectores) :
                new ObjectParameter("parteSectores", typeof(string));
    
            var sectorParameter = sector != null ?
                new ObjectParameter("sector", sector) :
                new ObjectParameter("sector", typeof(string));
    
            var existePoliticaParameter = existePolitica != null ?
                new ObjectParameter("existePolitica", existePolitica) :
                new ObjectParameter("existePolitica", typeof(string));
    
            var existeCodigoEticaParameter = existeCodigoEtica != null ?
                new ObjectParameter("existeCodigoEtica", existeCodigoEtica) :
                new ObjectParameter("existeCodigoEtica", typeof(string));
    
            var existeComiteParameter = existeComite != null ?
                new ObjectParameter("existeComite", existeComite) :
                new ObjectParameter("existeComite", typeof(string));
    
            var existeMecanismoParameter = existeMecanismo != null ?
                new ObjectParameter("existeMecanismo", existeMecanismo) :
                new ObjectParameter("existeMecanismo", typeof(string));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("comentario", comentario) :
                new ObjectParameter("comentario", typeof(string));
    
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("idEmpleado", idEmpleado) :
                new ObjectParameter("idEmpleado", typeof(int));
    
            var dondeTrabajoParameter = dondeTrabajo != null ?
                new ObjectParameter("dondeTrabajo", dondeTrabajo) :
                new ObjectParameter("dondeTrabajo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("respEmplInsert", sexoParameter, edadParameter, estadoCivilParameter, antiguedadParameter, tiempoPuestoParameter, tiempoExperienciaParameter, escolaridadParameter, tipoJornadaParameter, tipoContratacionParameter, tipoPersonalParameter, tieneDiscapacidadParameter, discapacidadParameter, realizaRotacionParameter, idCuestionarioParameter, idEmpresaParameter, idCentroTRabajoParameter, parteSectoresParameter, sectorParameter, existePoliticaParameter, existeCodigoEticaParameter, existeComiteParameter, existeMecanismoParameter, comentarioParameter, idEmpleadoParameter, dondeTrabajoParameter, idRespEmpl);
        }
    
        public virtual int cuestionatioATSInsert(string traumatico, Nullable<System.DateTime> fechao, string hora, string descripcion, Nullable<int> personas, Nullable<int> tipo, ObjectParameter idCuestionarioATS)
        {
            var traumaticoParameter = traumatico != null ?
                new ObjectParameter("traumatico", traumatico) :
                new ObjectParameter("traumatico", typeof(string));
    
            var fechaoParameter = fechao.HasValue ?
                new ObjectParameter("fechao", fechao) :
                new ObjectParameter("fechao", typeof(System.DateTime));
    
            var horaParameter = hora != null ?
                new ObjectParameter("hora", hora) :
                new ObjectParameter("hora", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var personasParameter = personas.HasValue ?
                new ObjectParameter("personas", personas) :
                new ObjectParameter("personas", typeof(int));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuestionatioATSInsert", traumaticoParameter, fechaoParameter, horaParameter, descripcionParameter, personasParameter, tipoParameter, idCuestionarioATS);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
