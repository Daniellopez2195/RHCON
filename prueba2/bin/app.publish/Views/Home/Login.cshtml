@model rhcon.Models.ViewModel.LoginViewModel
@{
    ViewBag.Title = "Inicio de Sesión";
    Layout = "~/Views/Shared/_LayoutIndex.cshtml";
}

<div class="base base2">
    <main class="content" role="content">
        <!-- partial:index.partial.html -->
        <div class="page">
            <div class="container2">
                <div class="left">
                    <div class="login" style="font-size: 35px">Usuarios</div>
                    <div class="eula">

                        -Una gran visión sin grandes personas es irrelevante.-Jim Collins.
                    </div>
                </div>
                <div class="right">
                    <svg viewBox="0 -20 320 300">
                        <defs>
                            <linearGradient inkscape:collect="always"   
                                            id="linearGradient"
                                            x1="13"
                                            y1="193.49992"
                                            x2="307"
                                            y2="193.49992"
                                            gradientUnits="userSpaceOnUse">
                                <stop style="stop-color:#7dc4f5;"
                                      offset="0"
                                      id="stop876" />
                                <stop style="stop-color:#ffff;"
                                      offset="1"
                                      id="stop878" />
                            </linearGradient>
                        </defs>
                        <path d="m 40,120.00016 239.99984,-3.2e-4 c 0,0 24.99263,0.79932 25.00016,35.00016 0.008,34.20084 -25.00016,35 -25.00016,35 h -239.99984 c 0,-0.0205 -25,4.01348 -25,38.5 0,34.48652 25,38.5 25,38.5 h 215 c 0,0 20,-0.99604 20,-25 0,-24.00396 -20,-25 -20,-25 h -190 c 0,0 -20,1.71033 -20,25 0,24.00396 20,25 20,25 h 168.57143" />
                    </svg>  
                    <div class="form">
                        @using (Html.BeginForm())
                        {
                            @Html.AntiForgeryToken()
                            <div class="form-group">
                                @Html.DropDownListFor(model => model.IdRol, Model.RolList, "Seleccione el Rol", new { htmlAttributes = new { @class = "select" } }) <br />
                                @Html.ValidationMessageFor(model => model.IdRol, "", new { @class = "text-danger" })
                            </div>
                            <!--<label for="email" class="labelk">Usuario</label>-->
                            @Html.LabelFor(model => model.nombre, htmlAttributes: new { @class = "labelk" })
                            <!--<input type="text" id="email" name="usuario" class="inputk">-->
                            //@Html.EditorFor(model => model.nombre, new { htmlAttributes = new { @class = "inputk", id = "nombre" } })
                            //@Html.ValidationMessageFor(model => model.nombre, "", new { @class = "text-danger" })
                            <input class="inputk" data-val="true" data-val-length="El campo Usuario: debe ser una cadena con una longitud máxima de 75." data-val-length-max="75" data-val-required="El campo Usuario: es obligatorio." id="nombre" name="nombre" type="text" value=@Model.nombre /><span class="field-validation-valid text-danger" data-valmsg-for="nombre" data-valmsg-replace="true"></span>
                            <!--<label for="password" class="labelk">Contraseña</label>-->
                            @Html.LabelFor(model => model.password, htmlAttributes: new { @class = "labelk" })
                            <!--<input type="password" id="password" name="password" class="inputk">-->
                            //@Html.EditorFor(model => model.password, new { htmlAttributes = new { @class = "inputk", id = "password" } })
                            //@Html.ValidationMessageFor(model => model.password, "", new { @class = "text-danger" })
                            <input class="inputk" data-val="true" data-val-required="El campo Password: es obligatorio." id="password" name="password" type="password" value=@Model.password /><span class="field-validation-valid text-danger" data-valmsg-for="password" data-valmsg-replace="true"></span>
                            <input type="submit" id="submit" value="Entrar" class="inputk">
                        }
                    </div>
                </div>
            </div><br />
            <div class="text-danger" style="text-align:center">
                @ViewBag.Message
            </div>
        </div>

    </main> <!-- /content -->


</div>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/animejs/2.2.0/anime.min.js'></script>



<script>
    //Importante, sin esta línea de código para que la carga del CSS Funcion anónima para este efecto
    $("select").addClass("select");

    var current = null;
    document.querySelector("#nombre").addEventListener("focus", function (e) {
        if (current) current.pause();
        current = anime({
            targets: "path",
            strokeDashoffset: {
                value: 0,
                duration: 700,
                easing: "easeOutQuart"
            },
            strokeDasharray: {
                value: "240 1386",
                duration: 700,
                easing: "easeOutQuart"
            }
        });
    });
    document.querySelector("#password").addEventListener("focus", function (e) {
        if (current) current.pause();
        current = anime({
            targets: "path",
            strokeDashoffset: {
                value: -336,
                duration: 700,
                easing: "easeOutQuart"
            },
            strokeDasharray: {
                value: "240 1386",
                duration: 700,
                easing: "easeOutQuart"
            }
        });
    });
    document.querySelector("#submit").addEventListener("focus", function (e) {
        if (current) current.pause();
        current = anime({
            targets: "path",
            strokeDashoffset: {
                value: -710,
                duration: 700,
                easing: "easeOutQuart"
            },
            strokeDasharray: {
                value: "50 1386",
                duration: 700,
                easing: "easeOutQuart"
            }
        });
    });

</script>

